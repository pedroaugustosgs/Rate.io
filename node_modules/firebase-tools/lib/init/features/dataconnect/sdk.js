"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actuate = exports.doSetup = exports.FDC_APP_FOLDER = void 0;
const yaml = require("yaml");
const fs = require("fs");
const clc = require("colorette");
const path = require("path");
const prompt_1 = require("../../../prompt");
const fileUtils_1 = require("../../../dataconnect/fileUtils");
const load_1 = require("../../../dataconnect/load");
const types_1 = require("../../../dataconnect/types");
const dataconnectEmulator_1 = require("../../../emulator/dataconnectEmulator");
const error_1 = require("../../../error");
const lodash_1 = require("lodash");
const utils_1 = require("../../../utils");
exports.FDC_APP_FOLDER = "_FDC_APP_FOLDER";
async function doSetup(setup, config) {
    const sdkInfo = await askQuestions(setup, config);
    await actuate(sdkInfo, setup.projectId);
    (0, utils_1.logSuccess)(`If you'd like to generate additional SDKs later, run ${clc.bold("firebase init dataconnect:sdk")}`);
}
exports.doSetup = doSetup;
async function askQuestions(setup, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    const serviceCfgs = (0, fileUtils_1.readFirebaseJson)(config);
    const serviceInfos = await Promise.all(serviceCfgs.map((c) => (0, load_1.load)(setup.projectId || "", config, c.source)));
    const connectorChoices = serviceInfos
        .map((si) => {
        return si.connectorInfo.map((ci) => {
            return {
                name: `${si.dataConnectYaml.serviceId}/${ci.connectorYaml.connectorId}`,
                value: ci,
            };
        });
    })
        .flat();
    if (!connectorChoices.length) {
        throw new error_1.FirebaseError(`Your config has no connectors to set up SDKs for. Run ${clc.bold("firebase init dataconnect")} to set up a service and connectors.`);
    }
    let targetPlatform = types_1.Platform.UNDETERMINED;
    let appDir = process.env[exports.FDC_APP_FOLDER] || process.cwd();
    const cwdPlatformGuess = await (0, fileUtils_1.getPlatformFromFolder)(appDir);
    if (cwdPlatformGuess !== types_1.Platform.UNDETERMINED) {
        (0, utils_1.logSuccess)(`Detected ${cwdPlatformGuess} app in directory ${appDir}`);
        targetPlatform = cwdPlatformGuess;
    }
    else {
        (0, utils_1.logBullet)(`Couldn't automatically detect your app directory.`);
        appDir =
            (_a = process.env[exports.FDC_APP_FOLDER]) !== null && _a !== void 0 ? _a : (await (0, prompt_1.promptForDirectory)({
                config,
                message: "Where is your app directory? Leave blank to set up a generated SDK in your current directory.",
            }));
        const platformGuess = await (0, fileUtils_1.getPlatformFromFolder)(appDir);
        if (platformGuess !== types_1.Platform.UNDETERMINED) {
            (0, utils_1.logSuccess)(`Detected ${platformGuess} app in directory ${appDir}`);
            targetPlatform = platformGuess;
        }
        else {
            (0, utils_1.logBullet)("Couldn't automatically detect your app's platform.");
            const platforms = [
                { name: "iOS (Swift)", value: types_1.Platform.IOS },
                { name: "Web (JavaScript)", value: types_1.Platform.WEB },
                { name: "Android (Kotlin)", value: types_1.Platform.ANDROID },
            ];
            targetPlatform = await (0, prompt_1.promptOnce)({
                message: "Which platform do you want to set up a generated SDK for?",
                type: "list",
                choices: platforms,
            });
        }
    }
    const connectorInfo = await (0, prompt_1.promptOnce)({
        message: "Which connector do you want set up a generated SDK for?",
        type: "list",
        choices: connectorChoices,
    });
    const newConnectorYaml = JSON.parse(JSON.stringify(connectorInfo.connectorYaml));
    if (!newConnectorYaml.generate) {
        newConnectorYaml.generate = {};
    }
    let displayIOSWarning = false;
    if (targetPlatform === types_1.Platform.IOS) {
        const outputDir = ((_b = newConnectorYaml.generate.swiftSdk) === null || _b === void 0 ? void 0 : _b.outputDir) ||
            path.relative(connectorInfo.directory, path.join(appDir, `generated/swift`));
        const pkg = (_d = (_c = newConnectorYaml.generate.swiftSdk) === null || _c === void 0 ? void 0 : _c.package) !== null && _d !== void 0 ? _d : (0, lodash_1.upperFirst)((0, lodash_1.camelCase)(newConnectorYaml.connectorId));
        const swiftSdk = { outputDir, package: pkg };
        newConnectorYaml.generate.swiftSdk = swiftSdk;
        displayIOSWarning = true;
    }
    if (targetPlatform === types_1.Platform.WEB) {
        const outputDir = ((_e = newConnectorYaml.generate.javascriptSdk) === null || _e === void 0 ? void 0 : _e.outputDir) ||
            path.relative(connectorInfo.directory, path.join(appDir, `generated/javascript/${newConnectorYaml.connectorId}`));
        const pkg = (_g = (_f = newConnectorYaml.generate.javascriptSdk) === null || _f === void 0 ? void 0 : _f.package) !== null && _g !== void 0 ? _g : `@firebasegen/${connectorInfo.connectorYaml.connectorId}`;
        const javascriptSdk = {
            outputDir,
            package: pkg,
        };
        if ((await (0, fileUtils_1.directoryHasPackageJson)(appDir)) &&
            (await (0, prompt_1.confirm)({
                message: "Would you like to add a dependency on the generated SDK to your package.json?",
            }))) {
            javascriptSdk.packageJsonDir = path.relative(connectorInfo.directory, appDir);
        }
        newConnectorYaml.generate.javascriptSdk = javascriptSdk;
    }
    if (targetPlatform === types_1.Platform.DART) {
        const outputDir = ((_h = newConnectorYaml.generate.dartSdk) === null || _h === void 0 ? void 0 : _h.outputDir) ||
            path.relative(connectorInfo.directory, path.join(appDir, `generated/dart/${newConnectorYaml.connectorId}`));
        const pkg = (_k = (_j = newConnectorYaml.generate.dartSdk) === null || _j === void 0 ? void 0 : _j.package) !== null && _k !== void 0 ? _k : newConnectorYaml.connectorId;
        const dartSdk = {
            outputDir,
            package: pkg,
        };
        newConnectorYaml.generate.dartSdk = dartSdk;
    }
    if (targetPlatform === types_1.Platform.ANDROID) {
        let baseDir = path.join(appDir, `generated/kotlin`);
        for (const candidateSubdir of ["app/src/main/java", "app/src/main/kotlin"]) {
            const candidateDir = path.join(appDir, candidateSubdir);
            if (fs.existsSync(candidateDir)) {
                baseDir = candidateDir;
            }
        }
        const outputDir = ((_l = newConnectorYaml.generate.kotlinSdk) === null || _l === void 0 ? void 0 : _l.outputDir) ||
            path.relative(connectorInfo.directory, baseDir);
        const pkg = (_o = (_m = newConnectorYaml.generate.kotlinSdk) === null || _m === void 0 ? void 0 : _m.package) !== null && _o !== void 0 ? _o : `connectors.${(0, lodash_1.snakeCase)(connectorInfo.connectorYaml.connectorId)}`;
        const kotlinSdk = {
            outputDir,
            package: pkg,
        };
        newConnectorYaml.generate.kotlinSdk = kotlinSdk;
    }
    const shouldGenerate = !!(setup.projectId &&
        (await (0, prompt_1.confirm)({
            message: "Would you like to generate SDK code now?",
            default: true,
        })));
    const connectorYamlContents = yaml.stringify(newConnectorYaml);
    connectorInfo.connectorYaml = newConnectorYaml;
    return { connectorYamlContents, connectorInfo, shouldGenerate, displayIOSWarning };
}
async function actuate(sdkInfo, projectId) {
    var _a;
    const connectorYamlPath = `${sdkInfo.connectorInfo.directory}/connector.yaml`;
    fs.writeFileSync(connectorYamlPath, sdkInfo.connectorYamlContents, "utf8");
    (0, utils_1.logBullet)(`Wrote new config to ${connectorYamlPath}`);
    if (projectId && sdkInfo.shouldGenerate) {
        await dataconnectEmulator_1.DataConnectEmulator.generate({
            configDir: sdkInfo.connectorInfo.directory,
            connectorId: sdkInfo.connectorInfo.connectorYaml.connectorId,
        });
        (0, utils_1.logBullet)(`Generated SDK code for ${sdkInfo.connectorInfo.connectorYaml.connectorId}`);
    }
    if (((_a = sdkInfo.connectorInfo.connectorYaml.generate) === null || _a === void 0 ? void 0 : _a.swiftSdk) && sdkInfo.displayIOSWarning) {
        (0, utils_1.logBullet)(clc.bold("Please follow the instructions here to add your generated sdk to your XCode project:\n\thttps://firebase.google.com/docs/data-connect/gp/ios-sdk#set-client"));
    }
}
exports.actuate = actuate;
