"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printFreeTrialUnavailable = exports.checkForFreeTrialInstance = exports.freeTrialTermsLink = void 0;
const cloudsqladmin_1 = require("../gcp/cloudsql/cloudsqladmin");
const utils = require("../utils");
const clc = require("colorette");
function freeTrialTermsLink() {
    return "https://firebase.google.com/pricing";
}
exports.freeTrialTermsLink = freeTrialTermsLink;
async function checkForFreeTrialInstance(projectId) {
    var _a;
    const instances = await (0, cloudsqladmin_1.listInstances)(projectId);
    return (_a = instances.find((i) => { var _a; return ((_a = i.settings.userLabels) === null || _a === void 0 ? void 0 : _a["firebase-data-connect"]) === "ft"; })) === null || _a === void 0 ? void 0 : _a.name;
}
exports.checkForFreeTrialInstance = checkForFreeTrialInstance;
function printFreeTrialUnavailable(projectId, instanceId, configYamlPath) {
    utils.logLabeledError("dataconnect", `Project '${projectId} already has a CloudSQL instance '${instanceId}' on the Firebase Data Connect no-cost trial.`);
    const reuseHint = `To use a different database in the same instance, ${clc.bold(`change the ${clc.blue("instanceId")} to "${instanceId}"`)} in ` +
        `${clc.green(configYamlPath)}. (Also, update the ${clc.blue("database")} field (i.e. DB name in the instance) ` +
        `and ${clc.blue("location")} as needed.)`;
    utils.logLabeledBullet("dataconnect", reuseHint);
    utils.logLabeledBullet("dataconnect", `Or you may create a new (paid) CloudSQL instance at https://console.cloud.google.com/sql/instances`);
}
exports.printFreeTrialUnavailable = printFreeTrialUnavailable;
